#Installing the libaries
library(caTools)
library(e1071)
#Checking that the libraries are successfully installed
library(caTools)
library(e1071)
#Importing The Dataset
mydata <- read.csv("~/Documents/BE/LP1/diabetes.csv")
#Checking the Dataset
View(mydata)
#Dimensions of the DataSet
dim(mydata)
names(mydata)
#internal structure
names(mydata)
#Installing the libaries
library(caTools)
library(e1071)
#Checking that the libraries are successfully installed
library(caTools)
library(e1071)
#Importing The Dataset
mydata <- read.csv("/home/shiva/Documents/BE/LP1/Cancer_Dataset/data.csv")
#Checking the Dataset
View(mydata)
#Dimensions of the DataSet
dim(mydata)
names(mydata)
#internal structure
names(mydata)
#Statistics of Major attributes useful for predicting the diagonsis.
#Min Values
min(mydata$area_worst)
min(mydata$smoothness_worst)
min(mydata$atexture_mean)
#Statistics of Major attributes useful for predicting the diagonsis.
#Min Values
min(mydata$area_worst)
min(mydata$smoothness_worst)
min(mydata$texture_mean)
#Max Values
max(mydata$area_worst)
max(mydata$smoothness_worst)
max(mydata$texture_mean)
#Range
range(mydata$area_worst)
range(mydata$smoothness_worst)
range(mydata$texture_mean)
#Standard Deviation
sd(mydata$area_worst)
sd(mydata$smoothness_worst)
sd(mydata$texture_mean)
#Variance
var(mydata$area_worst)
var(mydata$smoothness_worst)
var(mydata$texture_mean)
#Percentile
quantile(mydata$area_worst)
quantile(mydata$smoothness_worst)
quantile(mydata$texture_mean)
hist(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", col=mydata$diagnosis)
hist(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area")
hist(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", col=mydata$diagnosis)
hist(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", col="mydata$diagnosis"")
hist(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", col="mydata$diagnosis")
hist(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", col=mydata$diagnosis)
hist(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", ylim = c(0,400) ,col=mydata$diagnosis)
hist(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", ylim = c(0,100) ,col=mydata$diagnosis)
hist(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", ylim = c(0,10) ,col=mydata$diagnosis)
hist(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", col=mydata$diagnosis)
hist(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", col=mydata$diagnosis$B)
hist(mydata$diagnosis, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", col=mydata$diagnosis)
hist(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", col=mydata$diagnosis)
mydata$diagnosis
if(mydata$diagnosis = "M")
{color="Blue"}
if(mydata$diagnosis == "M")
{color="Blue"}
if(mydata$diagnosis == "M")
{color="Blue"}
if(c(mydata$diagnosis) == "M")
{color="Blue"}
c(mydata$diagnosis)
md <- c(mydata$diagnosis)
hist(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", col=md)
hist(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", col=md)
hist(md)
hist(mydata$area_worst, md, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", col=md)
hist(md, mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", col=md)
plot(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", col=md)
hist(md, mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", col=md)
hist(mydata$area_worst, md, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", col=md)
hist(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", col=mydata$diagnosis)
plot(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", xlab = "Worst Area", col=md)
plot(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", ylab = "Worst Area", col=md)
plot(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", ylab = "Worst Area", col=md, xlim = c(1,100))
plot(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", ylab = "Worst Area", col=md, xlim = c(1,10))
plot(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", ylab = "Worst Area", col=md, xlim = c(1,50))
plot(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", ylab = "Worst Area", col=md, xlim = c(1,100))
plot(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", ylab = "Worst Area", col=mydata$diagnosis, xlim = c(1,100))
plot(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", ylab = "Worst Area", col=mydata$diagnosis, xlim = c(1,250))
plot(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", ylab = "Worst Area", col=mydata$diagnosis, xlim = c(1,200))
#Data Visualisation
plot(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", ylab = "Worst Area", col=mydata$diagnosis, xlim = c(1,200))
#Using Worst Smoothness
plot(mydata$smoothness_worst, main = "Diagonsis using Worst Smoothness of Nuceli", ylab = "Worst Smoothness", col=mydata$diagnosis, xlim = c(1,200))
#Using Mean Texture
plot(mydata$texture_mean, main = "Diagonsis using Mean Texture of Nuceli", ylab = "Mean Texture", col=mydata$diagnosis, xlim = c(1,200))
#Data Visualisation
boxplot(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", ylab = "Worst Area", col=mydata$diagnosis, xlim = c(1,200))
#Data Visualisation
boxplot(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", ylab = "Worst Area", col=mydata$diagnosis, xlim = c(1,500))
#Data Visualisation
boxplot(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", ylab = "Worst Area", col=mydata$diagnosis
#Data Visualisation
boxplot(mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", ylab = "Worst Area", col=mydata$diagnosis)
boxplot(c(mydata$diagnosis), mydata$texture_mean)
boxplot(c(mydata$diagnosis), mydata$texture_mean, col = mydata$diagnosis)
boxplot(mydata$diagnosis, mydata$texture_mean, col = mydata$diagnosis)
boxplot(mydata$diagnosis, mydata$texture_mean, col = mydata$diagnosis)
boxplot(mydata$diagnosis, mydata$texture_mean)
#Data Visualisation
boxplot(mydata$diagnosis, mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", ylab = "Worst Area", col=mydata$diagnosis)
#Data Visualisation
boxplot(c(mydata$diagnosis), mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", ylab = "Worst Area", col=mydata$diagnosis)
#Data Visualisation
boxplot(c(mydata$diagnosis), mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", ylab = "Worst Area")
#Data Visualisation
boxplot(c(mydata$diagnosis), mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", ylab = "Worst Area")
boxplot(mydata$diagnosis, mydata$texture_mean)
boxplot(c(mydata$diagnosis), mydata$texture_mean)
#Data Visualisation
boxplot(c(mydata$diagnosis), mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli", ylab = "Worst Area")
#Data Visualisation
boxplot(c(mydata$diagnosis), mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli")
#Data Visualisation
boxplot(c(mydata$diagnosis), mydata$area_worst)
#Data Visualisation
boxplot(c(mydata$diagnosis), mydata$area_worst, main = "Diagonsis using Worst Area of Nuceli")
#Data Visualisation
boxplot(c(mydata$diagnosis), mydata$area_worst, ylab = "Worst Area")
#Data Visualisation
boxplot(c(mydata$diagnosis), mydata$area_worst)
#Data Visualisation
boxplot(c(mydata$diagnosis), mydata$area_worst)
boxplot(mydata)
boxplot(mydata[,2])
boxplot(mydata[,-2])
boxplot(mydata[,-2, -1])
boxplot(mydata[,-2 -1])
boxplot(mydata[,-2 -1,-5])
boxplot(mydata[,(-1,-2)])
boxplot(mydata[-1,-2])
boxplot(mydata[-1,-2])
boxplot(mydata[-1,-2,-1])
mydata[,-1,-2]
boxplot(mydata$diagnosis, mydata$texture_mean, mydata$area_worst)
boxplot(mydata$diagnosis, mydata$texture_mean)
boxplot(mydata$texture_mean, mydata$area_worst)
boxplot(mydata$texture_mean, mydata$area_worst, mydata$diagnosis)
> mydata <- read.csv("/home/shiva/Documents/BE/LP1/Cancer_Dataset/data.csv")
mydata <- read.csv("/home/shiva/Documents/BE/LP1/Cancer_Dataset/data.csv")
mydata <- mydata[,c(1:32)]
boxplot(mydata[,c(4,5,8)])
boxplot(mydata[,c(5:21)])
boxplot(mydata[,c(5:10)])
boxplot(mydata[,c(5:8)])
boxplot(mydata[,c(4,26,27)])
boxplot(mydata[,c(4,26,27)], ylim=c(0,2100))
boxplot(mydata[,c(4,27)])
temp_field<-sample.split(mydata$diagnosis,SplitRatio=0.6)
train<-subset(mydata, temp_field==TRUE)
test<-subset(mydata, temp_field == FALSE)
#Using Naive Bayes Algorithm
my_model<-naiveBayes(as.factor(train$diagnosis)~.,train)
pred1<-predict(my_model,test[,-2])
#Using Classification Algorithm to Predict Diagonsis
#Splitting the Data into Training and Testing Dataset
temp_field<-sample.split(mydata$diagnosis,SplitRatio=0.6)
train<-subset(mydata, temp_field==TRUE)
test<-subset(mydata, temp_field == FALSE)
#Using Naive Bayes Algorithm
my_model<-naiveBayes(as.factor(train$diagnosis)~.,train)
pred1<-predict(my_model,test[,-2])
#Creating Confusion Matrix
ConFusNavB <- table(pred1, test$diagnosis, dnn=c("predicted", "Actual"))
ConFusNavB
output<-cbind(test, pred1)
output
#Using SVM Algorithm
split = sample.split(mydata$diagnosis, SplitRatio = 0.60)
training_set = subset(mydata, split == TRUE)
test_set = subset(mydata, split == FALSE)
classifier = svm(formula = diagnosis ~ .,data = training_set,type = 'C-classification',kernel = 'linear')
y_pred = predict(classifier, newdata = test_set[-2])
ConFusSVM = table(test_set[, 2], y_pred, dnn=c("predicted", "Actual"))
ConFusSVM
#Comparing Confusion Matrices
#Correct predicitions Using Naive Bayes
ConFusNavB[1]+ConFusNavB[4]
#Incorrect predicitions Using Naive Bayes
ConFusNavB[2]+ConFusNavB[3]
(ConFusNavB[1]+ConFusNavB[4])/228
count.fields(test)
count.fields("test"")
count.fields("test")
count.fields(test$diagnosis)
(ConFusNavB[1]+ConFusNavB[4])/(ConFusNavB[1:4])
(ConFusNavB[1]+ConFusNavB[4])/(ConFusNavB)
(ConFusNavB[1]+ConFusNavB[4])/(ConFusNavB[,])
(ConFusNavB[1]+ConFusNavB[4])/(ConFusNavB[1]+ConFusNavB[2]+ConFusNavB[3]+ConFusNavB[4])
#Correct predicitions % Using Naive Bayes
(ConFusNavB[1]+ConFusNavB[4])/(ConFusNavB[1]+ConFusNavB[2]+ConFusNavB[3]+ConFusNavB[4])
#Incorrect predicitions % Using Naive Bayes
(ConFusNavB[2]+ConFusNavB[3])/(ConFusNavB[1]+ConFusNavB[2]+ConFusNavB[3]+ConFusNavB[4])
#Correct predicitions % Using Naive Bayes
((ConFusNavB[1]+ConFusNavB[4])/(ConFusNavB[1]+ConFusNavB[2]+ConFusNavB[3]+ConFusNavB[4]))*100
#Incorrect predicitions % Using Naive Bayes
((ConFusNavB[2]+ConFusNavB[3])/(ConFusNavB[1]+ConFusNavB[2]+ConFusNavB[3]+ConFusNavB[4]))*100
#Comparing Confusion Matrices
#Naives Bayes
#Correct predicitions Using Naive Bayes
ConFusNavB[1]+ConFusNavB[4]
#Incorrect predicitions Using Naive Bayes
ConFusNavB[2]+ConFusNavB[3]
#Correct predicitions % Using Naive Bayes
CPNB = ((ConFusNavB[1]+ConFusNavB[4])/(ConFusNavB[1]+ConFusNavB[2]+ConFusNavB[3]+ConFusNavB[4]))*100
#Incorrect predicitions % Using Naive Bayes
IPNB = ((ConFusNavB[2]+ConFusNavB[3])/(ConFusNavB[1]+ConFusNavB[2]+ConFusNavB[3]+ConFusNavB[4]))*100
#SVM
#Correct predicitions Using SVM
ConFusSVM[1]+ConFusSVM[4]
#Incorrect predicitions Using SVM
ConFusSVM[2]+ConFusSVM[3]
#Correct predicitions % Using SVM
CPSVM = ((ConFusSVM[1]+ConFusSVM[4])/(ConFusSVM[1]+ConFusSVM[2]+ConFusSVM[3]+ConFusSVM[4]))*100
#Incorrect predicitions % Using SVM
IPSVM = ((ConFusSVM[2]+ConFusSVM[3])/(ConFusSVM[1]+ConFusSVM[2]+ConFusSVM[3]+ConFusSVM[4]))*100
#Comparing Confusion Matrices
#Naives Bayes
#Correct predicitions Using Naive Bayes
ConFusNavB[1]+ConFusNavB[4]
#Incorrect predicitions Using Naive Bayes
ConFusNavB[2]+ConFusNavB[3]
#Correct predicitions % Using Naive Bayes
CPNB = ((ConFusNavB[1]+ConFusNavB[4])/(ConFusNavB[1]+ConFusNavB[2]+ConFusNavB[3]+ConFusNavB[4]))*100
CPNB
#Incorrect predicitions % Using Naive Bayes
IPNB = ((ConFusNavB[2]+ConFusNavB[3])/(ConFusNavB[1]+ConFusNavB[2]+ConFusNavB[3]+ConFusNavB[4]))*100
IPNB
#SVM
#Correct predicitions Using SVM
ConFusSVM[1]+ConFusSVM[4]
#Incorrect predicitions Using SVM
ConFusSVM[2]+ConFusSVM[3]
#Correct predicitions % Using SVM
CPSVM = ((ConFusSVM[1]+ConFusSVM[4])/(ConFusSVM[1]+ConFusSVM[2]+ConFusSVM[3]+ConFusSVM[4]))*100
CPSVM
#Incorrect predicitions % Using SVM
IPSVM = ((ConFusSVM[2]+ConFusSVM[3])/(ConFusSVM[1]+ConFusSVM[2]+ConFusSVM[3]+ConFusSVM[4]))*100
IPSVM
boxplot(ConFusNavB)
plot(ConFusNavB, ConFusSVM)
plot(ConFusNavB)
plot(ConFusSVM)
